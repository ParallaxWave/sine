function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import PropTypes from 'prop-types';
import cx from 'clsx';

var BareHighlight = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(BareHighlight, _React$PureComponent);

  function BareHighlight() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {});

    return _this;
  }

  var _proto = BareHighlight.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.highlightCode();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    // If the text changed make sure to reset the state
    // This way we ensure that the new text is immediately displayed.
    if (prevProps.children !== this.props.children) {
      this.setState({
        highlightedCode: undefined,
        language: undefined
      });
      return;
    } // Do not call highlight.js if we already have highlighted code
    // If the children changed highlightedCode will be null


    if (this.state.highlightedCode) return;
    this.highlightCode();
  };

  _proto.getInitialCode = function getInitialCode() {
    var type = typeof this.props.children;

    if (type !== 'string') {
      throw new Error("Children of <Highlight> must be a string. '" + type + "' supplied");
    }

    return this.props.children;
  };

  _proto.getHighlightPromise = function getHighlightPromise() {
    var _this2 = this;

    var _this$props = this.props,
        highlightjs = _this$props.highlightjs,
        languages = _this$props.languages;
    return new Promise(function (resolve) {
      if (languages && languages.length === 1) {
        resolve(highlightjs.highlight(languages[0], _this2.getInitialCode()));
      } else {
        resolve(highlightjs.highlightAuto(_this2.getInitialCode(), languages));
      }
    });
  };

  _proto.highlightCode = function highlightCode() {
    var _this3 = this;

    var _this$props2 = this.props,
        languages = _this$props2.languages,
        worker = _this$props2.worker;

    if (worker) {
      worker.onmessage = function (event) {
        return _this3.setState({
          highlightedCode: event.data.value,
          language: event.data.language
        });
      };

      worker.postMessage({
        code: this.getInitialCode(),
        languages: languages
      });
    } else {
      this.getHighlightPromise().then(function (result) {
        return _this3.setState({
          highlightedCode: result.value,
          language: result.language
        });
      });
    }
  };

  _proto.render = function render() {
    var code = this.state.highlightedCode;
    var classes = cx(this.props.className, 'hljs', this.state.language);

    if (code) {
      return /*#__PURE__*/React.createElement("pre", null, /*#__PURE__*/React.createElement("code", {
        className: classes,
        dangerouslySetInnerHTML: {
          __html: code
        }
      }));
    }

    return /*#__PURE__*/React.createElement("pre", null, /*#__PURE__*/React.createElement("code", {
      className: classes
    }, this.getInitialCode()));
  };

  return BareHighlight;
}(React.PureComponent);

_defineProperty(BareHighlight, "defaultProps", {
  className: '',
  languages: [],
  worker: null
});

export { BareHighlight as default };
process.env.NODE_ENV !== "production" ? BareHighlight.propTypes = {
  children: PropTypes.string.isRequired,
  className: PropTypes.string,
  highlightjs: PropTypes.object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  languages: PropTypes.arrayOf(PropTypes.string),
  worker: PropTypes.object // eslint-disable-line react/forbid-prop-types

} : void 0;