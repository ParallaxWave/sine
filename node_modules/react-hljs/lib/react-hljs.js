(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'react', 'highlight.js'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('react'), require('highlight.js'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.React, global.hljs);
    global.Highlight = mod.exports;
  }
})(this, function (module, exports, _react, _highlight) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Highlight = function (_Component) {
    _inherits(Highlight, _Component);

    function Highlight() {
      var _Object$getPrototypeO;

      var _temp, _this, _ret;

      _classCallCheck(this, Highlight);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(Highlight)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this._ref = function (el) {
        _this._el = el;

        if (el) {
          (0, _highlight.highlightBlock)(el);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Highlight, [{
      key: 'componentDidUpdate',
      value: function componentDidUpdate() {
        if (this._el) {
          (0, _highlight.highlightBlock)(this._el);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props;
        var className = _props.className;
        var children = _props.children;


        return _react2.default.createElement(
          'pre',
          { className: className, ref: this._ref },
          _react2.default.createElement(
            'code',
            null,
            children
          )
        );
      }
    }]);

    return Highlight;
  }(_react.Component);

  Highlight.propTypes = {
    className: _react.PropTypes.string,
    children: _react.PropTypes.node
  };
  exports.default = Highlight;
  module.exports = exports['default'];
});